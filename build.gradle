plugins {
    id 'java'
    id 'jacoco'
}

group 'com.firebolt'

version = 2.0

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'net.jodah:expiringmap:0.5.10'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.1.3'
    implementation 'org.apache.httpcomponents.core5:httpcore5:5.1.3'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'org.lz4:lz4-java:1.8.0'
    implementation 'org.json:json:20220320'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'org.mockito:mockito-inline:4.6.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation group: 'org.junit-pioneer', name: 'junit-pioneer', version: '1.7.1'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/firebolt/jdbc/client/config/**",
                    "com/firebolt/jdbc/FireboltDriver.class",
                    "com/firebolt/jdbc/connection/settings/FireboltProperties.class",
                    "com/firebolt/jdbc/**/Abstract*.class"
            ])
        }))
    }
    reports {
        csv.enabled true
    }
}


jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Generate file containing project version
def generatedVersionDir = "${buildDir}/resources"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}

task generateVersionProperties {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties

task printVersion {
    println project.version
}
